// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"gitlab.ozon.dev/stepanov.ao.dev/telegram-bot/internal/ent/user"
	"gitlab.ozon.dev/stepanov.ao.dev/telegram-bot/internal/ent/waste"
)

// Waste is the model entity for the Waste schema.
type Waste struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Cost holds the value of the "cost" field.
	Cost int64 `json:"cost,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WasteQuery when eager-loading is set.
	Edges       WasteEdges `json:"edges"`
	user_wastes *int64
}

// WasteEdges holds the relations/edges for other nodes in the graph.
type WasteEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WasteEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Waste) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case waste.FieldCost:
			values[i] = new(sql.NullInt64)
		case waste.FieldCategory:
			values[i] = new(sql.NullString)
		case waste.FieldDate:
			values[i] = new(sql.NullTime)
		case waste.FieldID:
			values[i] = new(uuid.UUID)
		case waste.ForeignKeys[0]: // user_wastes
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Waste", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Waste fields.
func (w *Waste) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case waste.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				w.ID = *value
			}
		case waste.FieldCost:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				w.Cost = value.Int64
			}
		case waste.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				w.Category = value.String
			}
		case waste.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				w.Date = value.Time
			}
		case waste.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_wastes", value)
			} else if value.Valid {
				w.user_wastes = new(int64)
				*w.user_wastes = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Waste entity.
func (w *Waste) QueryUser() *UserQuery {
	return (&WasteClient{config: w.config}).QueryUser(w)
}

// Update returns a builder for updating this Waste.
// Note that you need to call Waste.Unwrap() before calling this method if this Waste
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Waste) Update() *WasteUpdateOne {
	return (&WasteClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Waste entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Waste) Unwrap() *Waste {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Waste is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Waste) String() string {
	var builder strings.Builder
	builder.WriteString("Waste(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("cost=")
	builder.WriteString(fmt.Sprintf("%v", w.Cost))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(w.Category)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(w.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Wastes is a parsable slice of Waste.
type Wastes []*Waste

func (w Wastes) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
