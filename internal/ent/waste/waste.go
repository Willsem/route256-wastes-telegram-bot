// Code generated by ent, DO NOT EDIT.

package waste

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the waste type in the database.
	Label = "waste"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCost holds the string denoting the cost field in the database.
	FieldCost = "cost"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the waste in the database.
	Table = "wastes"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "wastes"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_wastes"
)

// Columns holds all SQL columns for waste fields.
var Columns = []string{
	FieldID,
	FieldCost,
	FieldCategory,
	FieldDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "wastes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_wastes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
