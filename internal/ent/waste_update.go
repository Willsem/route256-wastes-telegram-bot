// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.ozon.dev/stepanov.ao.dev/telegram-bot/internal/ent/predicate"
	"gitlab.ozon.dev/stepanov.ao.dev/telegram-bot/internal/ent/user"
	"gitlab.ozon.dev/stepanov.ao.dev/telegram-bot/internal/ent/waste"
)

// WasteUpdate is the builder for updating Waste entities.
type WasteUpdate struct {
	config
	hooks    []Hook
	mutation *WasteMutation
}

// Where appends a list predicates to the WasteUpdate builder.
func (wu *WasteUpdate) Where(ps ...predicate.Waste) *WasteUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetCost sets the "cost" field.
func (wu *WasteUpdate) SetCost(i int64) *WasteUpdate {
	wu.mutation.ResetCost()
	wu.mutation.SetCost(i)
	return wu
}

// AddCost adds i to the "cost" field.
func (wu *WasteUpdate) AddCost(i int64) *WasteUpdate {
	wu.mutation.AddCost(i)
	return wu
}

// SetCategory sets the "category" field.
func (wu *WasteUpdate) SetCategory(s string) *WasteUpdate {
	wu.mutation.SetCategory(s)
	return wu
}

// SetDate sets the "date" field.
func (wu *WasteUpdate) SetDate(t time.Time) *WasteUpdate {
	wu.mutation.SetDate(t)
	return wu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (wu *WasteUpdate) SetUserID(id int64) *WasteUpdate {
	wu.mutation.SetUserID(id)
	return wu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (wu *WasteUpdate) SetNillableUserID(id *int64) *WasteUpdate {
	if id != nil {
		wu = wu.SetUserID(*id)
	}
	return wu
}

// SetUser sets the "user" edge to the User entity.
func (wu *WasteUpdate) SetUser(u *User) *WasteUpdate {
	return wu.SetUserID(u.ID)
}

// Mutation returns the WasteMutation object of the builder.
func (wu *WasteUpdate) Mutation() *WasteMutation {
	return wu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wu *WasteUpdate) ClearUser() *WasteUpdate {
	wu.mutation.ClearUser()
	return wu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WasteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wu.hooks) == 0 {
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WasteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			if wu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WasteUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WasteUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WasteUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WasteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   waste.Table,
			Columns: waste.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: waste.FieldID,
			},
		},
	}
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: waste.FieldCost,
		})
	}
	if value, ok := wu.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: waste.FieldCost,
		})
	}
	if value, ok := wu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: waste.FieldCategory,
		})
	}
	if value, ok := wu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: waste.FieldDate,
		})
	}
	if wu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   waste.UserTable,
			Columns: []string{waste.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   waste.UserTable,
			Columns: []string{waste.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{waste.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// WasteUpdateOne is the builder for updating a single Waste entity.
type WasteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WasteMutation
}

// SetCost sets the "cost" field.
func (wuo *WasteUpdateOne) SetCost(i int64) *WasteUpdateOne {
	wuo.mutation.ResetCost()
	wuo.mutation.SetCost(i)
	return wuo
}

// AddCost adds i to the "cost" field.
func (wuo *WasteUpdateOne) AddCost(i int64) *WasteUpdateOne {
	wuo.mutation.AddCost(i)
	return wuo
}

// SetCategory sets the "category" field.
func (wuo *WasteUpdateOne) SetCategory(s string) *WasteUpdateOne {
	wuo.mutation.SetCategory(s)
	return wuo
}

// SetDate sets the "date" field.
func (wuo *WasteUpdateOne) SetDate(t time.Time) *WasteUpdateOne {
	wuo.mutation.SetDate(t)
	return wuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (wuo *WasteUpdateOne) SetUserID(id int64) *WasteUpdateOne {
	wuo.mutation.SetUserID(id)
	return wuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (wuo *WasteUpdateOne) SetNillableUserID(id *int64) *WasteUpdateOne {
	if id != nil {
		wuo = wuo.SetUserID(*id)
	}
	return wuo
}

// SetUser sets the "user" edge to the User entity.
func (wuo *WasteUpdateOne) SetUser(u *User) *WasteUpdateOne {
	return wuo.SetUserID(u.ID)
}

// Mutation returns the WasteMutation object of the builder.
func (wuo *WasteUpdateOne) Mutation() *WasteMutation {
	return wuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wuo *WasteUpdateOne) ClearUser() *WasteUpdateOne {
	wuo.mutation.ClearUser()
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WasteUpdateOne) Select(field string, fields ...string) *WasteUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Waste entity.
func (wuo *WasteUpdateOne) Save(ctx context.Context) (*Waste, error) {
	var (
		err  error
		node *Waste
	)
	if len(wuo.hooks) == 0 {
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WasteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			if wuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, wuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Waste)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from WasteMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WasteUpdateOne) SaveX(ctx context.Context) *Waste {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WasteUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WasteUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WasteUpdateOne) sqlSave(ctx context.Context) (_node *Waste, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   waste.Table,
			Columns: waste.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: waste.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Waste.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, waste.FieldID)
		for _, f := range fields {
			if !waste.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != waste.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: waste.FieldCost,
		})
	}
	if value, ok := wuo.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: waste.FieldCost,
		})
	}
	if value, ok := wuo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: waste.FieldCategory,
		})
	}
	if value, ok := wuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: waste.FieldDate,
		})
	}
	if wuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   waste.UserTable,
			Columns: []string{waste.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   waste.UserTable,
			Columns: []string{waste.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Waste{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{waste.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
